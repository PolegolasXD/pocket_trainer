const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const User = require('../models/userModel');
const db = require('../db');
const OpenAI = require('openai');
const dotenv = require('dotenv');

dotenv.config();

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

exports.createUser = async (req, res) => {
  try {
    const { name, email, password, role = 'aluno' } = req.body;
    if (!name || !email || !password) {
      return res.status(400).json({ error: 'Preencha todos os campos' });
    }
    const hashedPassword = await bcrypt.hash(password, 10);
    const [user] = await User.createUser({ name, email, password: hashedPassword, role });
    res.status(201).json({ id: user.id, name: user.name, email: user.email, role: user.role });
  } catch {
    res.status(500).json({ error: 'Erro no servidor' });
  }
};

exports.getAllUsers = async (_req, res) => {
  try {
    const users = await User.getAllUsers();
    res.json(users);
  } catch {
    res.status(500).json({ error: 'Erro no servidor' });
  }
};

exports.getStudents = async (_req, res) => {
  try {
    const students = await User.getStudents();
    res.json(students);
  } catch {
    res.status(500).json({ error: 'Erro no servidor' });
  }
};

exports.getUserById = async (req, res) => {
  try {
    const { id } = req.params;
    const user = await User.getUserById(id);
    if (!user) {
      return res.status(404).json({ error: 'Usu√°rio n√£o encontrado' });
    }
    res.json(user);
  } catch {
    res.status(500).json({ error: 'Erro no servidor' });
  }
};

exports.getMe = async (req, res) => {
  try {
    const user = await User.getUserById(req.user.id);
    if (!user) {
      return res.status(404).json({ error: 'Usu√°rio n√£o encontrado' });
    }
    // eslint-disable-next-line no-unused-vars
    const { password, ...userData } = user;
    res.json(userData);
  } catch (error) {
    res.status(500).json({ error: 'Erro ao buscar dados do usu√°rio.' });
  }
};

exports.getChatStats = async (req, res) => {
  try {
    const aluno_id = req.user.id;
    const feedbacks = await db('feedbacks').where({ aluno_id }).select('id');
    const feedbackIds = feedbacks.map(f => f.id);

    if (feedbackIds.length === 0) {
      return res.json({ dor: 0, progresso: 0, duvida: 0, motivacao: 0, total: 0 });
    }

    const userMessages = await db('mensagens')
      .whereIn('feedback_id', feedbackIds)
      .andWhere({ sender: 'user' })
      .select('texto');

    const keywords = {
      dor: ['dor', 'doendo', 'desconforto', 'les√£o', 'machuquei'],
      progresso: ['progresso', 'evolu√ß√£o', 'melhor', 'aumentei', 'evoluindo'],
      duvida: ['d√∫vida', 'como', 'porque', 'ajuda', 'quando'],
      motivacao: ['motiva√ß√£o', 'foco', 'disciplina', 'animado', 'consist√™ncia'],
    };

    const stats = { dor: 0, progresso: 0, duvida: 0, motivacao: 0, total: userMessages.length };

    for (const msg of userMessages) {
      const texto = msg.texto.toLowerCase();
      for (const category in keywords) {
        if (keywords[category].some(kw => texto.includes(kw))) {
          stats[category]++;
        }
      }
    }

    res.json(stats);
  } catch (error) {
    console.error('Erro ao buscar estat√≠sticas do chat:', error);
    res.status(500).json({ error: 'Erro ao buscar estat√≠sticas do chat' });
  }
};

exports.getChatStatsByStudentId = async (req, res) => {
  try {
    const { id } = req.params;
    const feedbacks = await db('feedbacks').where({ aluno_id: id }).select('id');
    const feedbackIds = feedbacks.map(f => f.id);

    if (feedbackIds.length === 0) {
      return res.json({ dor: 0, progresso: 0, duvida: 0, motivacao: 0, total: 0 });
    }

    const userMessages = await db('mensagens')
      .whereIn('feedback_id', feedbackIds)
      .andWhere({ sender: 'user' })
      .select('texto');

    const keywords = {
      dor: ['dor', 'doendo', 'desconforto', 'les√£o', 'machuquei'],
      progresso: ['progresso', 'evolu√ß√£o', 'melhor', 'aumentei', 'evoluindo'],
      duvida: ['d√∫vida', 'como', 'porque', 'ajuda', 'quando'],
      motivacao: ['motiva√ß√£o', 'foco', 'disciplina', 'animado', 'consist√™ncia'],
    };

    const stats = { dor: 0, progresso: 0, duvida: 0, motivacao: 0, total: userMessages.length };

    for (const msg of userMessages) {
      const texto = msg.texto.toLowerCase();
      for (const category in keywords) {
        if (keywords[category].some(kw => texto.includes(kw))) {
          stats[category]++;
        }
      }
    }

    res.json(stats);
  } catch (error) {
    console.error('Erro ao buscar estat√≠sticas do chat do aluno:', error);
    res.status(500).json({ error: 'Erro ao buscar estat√≠sticas do chat do aluno' });
  }
};

exports.updateUser = async (req, res) => {
  try {
    const { id } = req.params;
    const updates = req.body;
    if (updates.password) {
      updates.password = await bcrypt.hash(updates.password, 10);
    }
    const [updatedUser] = await User.updateUser(id, updates);
    if (!updatedUser) {
      return res.status(404).json({ error: 'Usu√°rio n√£o encontrado' });
    }
    // eslint-disable-next-line no-unused-vars
    const { password, ...userData } = updatedUser;
    res.json(userData);
  } catch {
    res.status(500).json({ error: 'Erro no servidor' });
  }
};

exports.deleteUser = async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await User.deleteUserById(id);
    if (deleted === 0) {
      return res.status(404).json({ error: 'Usu√°rio n√£o encontrado' });
    }
    res.json({ message: 'Usu√°rio deletado com sucesso' });
  } catch {
    res.status(500).json({ error: 'Erro no servidor' });
  }
};

exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password) {
      return res.status(400).json({ error: 'Preencha e-mail e senha' });
    }

    const user = await User.getUserByEmail(email);
    const valid = user && (await bcrypt.compare(password, user.password));
    if (!valid) {
      return res.status(401).json({ error: 'Credenciais inv√°lidas' });
    }

    const token = jwt.sign(
      { id: user.id, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: process.env.JWT_EXPIRES_IN || '1d' }
    );

    res.json({
      token,
      user: { id: user.id, name: user.name, role: user.role }
    });
  } catch {
    res.status(500).json({ error: 'Erro no servidor' });
  }
};

exports.generateDashboardAnalysis = async (req, res) => {
  try {
    const { kpis, stats, topExercicios, chatStats } = req.body;

    const dataSummary = `
      - Indicadores Chave (KPIs): ${kpis ? `Carga M√©dia ${kpis.carga}kg, Repeti√ß√µes ${kpis.repeticoes}, Dura√ß√£o ${kpis.duracao}min, Frequ√™ncia ${kpis.frequencia}/semana, Intensidade ${kpis.intensidade}/10` : 'N√£o dispon√≠veis.'}
      - Progresso de Carga: ${kpis?.progresso !== undefined ? `${kpis.progresso}%` : 'N√£o dispon√≠vel.'}
      - Estat√≠sticas Gerais: ${stats ? `Dia mais intenso: ${stats.diaMaisPesado}, Exerc√≠cio frequente: ${stats.exercicioTop}, Total de sess√µes: ${stats.totalSes}` : 'N√£o dispon√≠veis.'}
      - Top Exerc√≠cios: ${topExercicios?.length ? topExercicios.map(e => `${e.name} (${e.value})`).join(', ') : 'N√£o dispon√≠veis.'}
      - T√≥picos do Chat: ${chatStats ? JSON.stringify(chatStats) : 'N√£o dispon√≠veis.'}
    `;

    const prompt = `
        Voc√™ √© o "Pocket Trainer IA", um personal trainer especialista em an√°lise de dados.
        Com base nos dados do dashboard de um aluno, gere UMA √öNICA FRASE como uma recomenda√ß√£o curta, pr√°tica e motivacional.
        Seja direto e use emojis para um tom amig√°vel (üí™, üöÄ, üìà).
        A resposta deve ser um texto puro, sem markdown, com no m√°ximo 25 palavras.

        Exemplos de resposta:
        - "Excelente consist√™ncia! Que tal focar em aumentar a carga no Leg Press? üí™"
        - "Notei uma queda na frequ√™ncia. Vamos tentar manter pelo menos 3 treinos na semana! üöÄ"
        - "Seus treinos de peito est√£o evoluindo bem! Continue com essa energia. üìà"

        Dados do Dashboard do Aluno:
        ${dataSummary}
    `;

    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.6,
    });

    const analysis = completion.choices[0].message.content.trim();

    res.json({ analysis });

  } catch (error) {
    console.error('Erro ao gerar an√°lise:', error);
    res.status(500).json({ error: 'Erro ao gerar an√°lise da IA' });
  }
};

exports.generateDashboardAnalysisForStudent = async (req, res) => {
  try {
    const { id } = req.params;
    const { kpis, stats, topExercicios, chatStats } = req.body;

    const dataSummary = `
      - Indicadores Chave (KPIs): ${kpis ? `Carga M√©dia ${kpis.carga}kg, Repeti√ß√µes ${kpis.repeticoes}, Dura√ß√£o ${kpis.duracao}min, Frequ√™ncia ${kpis.frequencia}/semana, Intensidade ${kpis.intensidade}/10` : 'N√£o dispon√≠veis.'}
      - Progresso de Carga: ${kpis?.progresso !== undefined ? `${kpis.progresso}%` : 'N√£o dispon√≠vel.'}
      - Estat√≠sticas Gerais: ${stats ? `Dia mais intenso: ${stats.diaMaisPesado}, Exerc√≠cio frequente: ${stats.exercicioTop}, Total de sess√µes: ${stats.totalSes}` : 'N√£o dispon√≠veis.'}
      - Top Exerc√≠cios: ${topExercicios?.length ? topExercicios.map(e => `${e.name} (${e.value})`).join(', ') : 'N√£o dispon√≠veis.'}
      - T√≥picos do Chat: ${chatStats ? JSON.stringify(chatStats) : 'N√£o dispon√≠veis.'}
    `;

    const prompt = `
      Voc√™ √© um assistente de IA especialista para um personal trainer. Sua fun√ß√£o √© analisar os dados de desempenho de um aluno e fornecer ao treinador insights claros e acion√°veis. Seu tom deve ser profissional, orientado a dados e conciso.

      Com base nos dados do painel do aluno fornecidos abaixo, gere um relat√≥rio para o personal trainer (o administrador).

      O relat√≥rio deve ser estruturado em tr√™s se√ß√µes distintas:
      1. **Ponto Forte:** Identifique a for√ßa mais significativa do aluno ou a √°rea de progresso positivo recente. Seja espec√≠fico e use dados para apoiar sua observa√ß√£o.
      2. **Ponto de Aten√ß√£o:** Aponte a √°rea mais cr√≠tica que precisa da aten√ß√£o do treinador. Isso pode ser falta de consist√™ncia, um plat√¥ em um exerc√≠cio espec√≠fico, m√° sele√ß√£o de exerc√≠cios ou sinais de potencial overtraining/undertraining. Justifique seu ponto com dados.
      3. **Plano de A√ß√£o Sugerido:** Forne√ßa de 2 a 3 itens de a√ß√£o concretos e numerados para o treinador implementar com o aluno. Por exemplo: "1. Sugira aumentar o peso nos agachamentos em 2.5kg na pr√≥xima semana." ou "2. Verifique com o aluno sobre sua intensidade percebida, pois parece baixa."

      N√£o use emojis. A resposta deve ser direta e profissional.

      Dados do Painel do Aluno:
      ${dataSummary}
    `;

    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.6,
    });

    const analysis = completion.choices[0].message.content.trim();

    res.json({ analysis });

  } catch (error) {
    console.error('Erro ao gerar an√°lise para o aluno:', error);
    res.status(500).json({ error: 'Erro ao gerar an√°lise da IA' });
  }
};
